openapi: 3.0.3
info:
  title: Your Project API
  version: 1.0.0
  description: Your project description
paths:
  /api/v1/basket/:
    get:
      operationId: basket_list
      description: |-
        Получение информации о корзине
        :param request: запрос пользователя
        :return: возвращает id заказа, список товаров добавленных в корзину, статус заказа, дату формирования,
        общую сумму заказа и контактные данные покупателя
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - basket
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderList'
          description: ''
    post:
      operationId: basket_create
      description: |-
        Создание корзины или добавление новых товаров в уже существующую
        :param request: запрос клиента со словарем в теле запроса
        формата - "items": [{"quantity":<int>, "product_info":<int>},{...}]
        :return: создает новый заказ со статусом basket, возвращает статус запроса
        и количество добавленных наименований товаров
      tags:
      - basket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
  /api/v1/basket/{id}/:
    get:
      operationId: basket_retrieve
      description: Класс для работы с корзиной пользователя
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Заказ.
        required: true
      tags:
      - basket
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    put:
      operationId: basket_update
      description: Класс для работы с корзиной пользователя
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Заказ.
        required: true
      tags:
      - basket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    patch:
      operationId: basket_partial_update
      description: Класс для работы с корзиной пользователя
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Заказ.
        required: true
      tags:
      - basket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    delete:
      operationId: basket_destroy
      description: Класс для работы с корзиной пользователя
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Заказ.
        required: true
      tags:
      - basket
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/basket/delete/:
    delete:
      operationId: basket_delete_destroy
      description: |-
        Удаление товаров из корзины
        При выполнении этого запроса, к базовому url этого класса нужно добавить /delete/
        :param request: запрос пользователя со строкой позиций товаров в корзине перечисленных
        через запятую формата - {"items": "<int>,<int>"}
        :return: удааляет выбранные позиции и возвращает количество удаленных наименований товаров
      tags:
      - basket
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/basket/put/:
    put:
      operationId: basket_put_update
      description: |-
        Обновление количества ранее добавленных товаров в корзине
        При выполнении этого запроса, к базовому url этого класса нужно добавить /put/
        :param request: запрос пользователя со строкой внутри словаря с id позиций товаров в корзине перечисленных
        через запятую формата - "items": [{"quantity":<int>, "id":<int>},{...}] - где id  это id позиции в корзине
        :return: обновляет количество выбранных позиций и возвращает количество обновленых товаров
      tags:
      - basket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
  /api/v1/categories:
    get:
      operationId: categories_list
      description: Класс для просмотра списка категорий
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - categories
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCategoryList'
          description: ''
  /api/v1/order/:
    get:
      operationId: order_list
      description: |-
        Получение информации о заказе
        :param request: запрос пользователя
        :return: возвращает id заказа, список товаров, статус заказа, дату формирования,
        общую сумму заказа и контактные данные покупателя
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - order
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderList'
          description: ''
    post:
      operationId: order_create
      description: |-
        Размещение заказа из корзины
        :param request: запрос пользователя со словарем формата - {"id":<int>, "contact":<int>}
        - где id  это id заказа, contact это id контакта пользователя
        :return: меняет статус заказа с basket на new, возвращает статус ответа и уведомление об отправке пользователю
        сообщения с информацией о заказе
      tags:
      - order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
  /api/v1/order/{id}/:
    get:
      operationId: order_retrieve
      description: Класс для получения и размешения заказов пользователями
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Заказ.
        required: true
      tags:
      - order
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    put:
      operationId: order_update
      description: Класс для получения и размешения заказов пользователями
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Заказ.
        required: true
      tags:
      - order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    patch:
      operationId: order_partial_update
      description: Класс для получения и размешения заказов пользователями
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Заказ.
        required: true
      tags:
      - order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    delete:
      operationId: order_destroy
      description: Класс для получения и размешения заказов пользователями
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Заказ.
        required: true
      tags:
      - order
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/order/delete/:
    delete:
      operationId: order_delete_destroy
      description: |-
        Отмена и удаление оформленного заказа
        При выполнении этого запроса, к базовому url этого класса нужно добавить /delete/
        :param request: запрос пользователя с id заказа формата - {"id":<int>}
        :return: удааляет заказ со статусом new и добавляет обратно в базу данных все позиции из заказа,
        возвращает статус ответа и сообщение с номером удаленного заказа
      tags:
      - order
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/partner/orders/:
    get:
      operationId: partner_orders_list
      description: |-
        Получение списка заказов магазином
        :param request: запрос пользователя
        :return: возвращает id заказа, список товаров, статус заказа, дату формирования,
        общую сумму заказа и контактные данные покупателя
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - partner
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderList'
          description: ''
    post:
      operationId: partner_orders_create
      description: Класс для получения заказов поставщиками
      tags:
      - partner
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
  /api/v1/partner/orders/{id}/:
    get:
      operationId: partner_orders_retrieve
      description: Класс для получения заказов поставщиками
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Заказ.
        required: true
      tags:
      - partner
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    put:
      operationId: partner_orders_update
      description: Класс для получения заказов поставщиками
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Заказ.
        required: true
      tags:
      - partner
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    patch:
      operationId: partner_orders_partial_update
      description: Класс для получения заказов поставщиками
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Заказ.
        required: true
      tags:
      - partner
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    delete:
      operationId: partner_orders_destroy
      description: Класс для получения заказов поставщиками
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Заказ.
        required: true
      tags:
      - partner
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/partner/state/:
    get:
      operationId: partner_state_list
      description: |-
        Получение текущего статуса магазина
        :param request: запрос пользователя
        :return: возвращает id магазина, название, статус магазина (принимает или не принимает заказы)
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - partner
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedShopList'
          description: ''
    post:
      operationId: partner_state_create
      description: |-
        Изменение текущего статуса магазина
        :param request: запрос пользователя со статусом формата - {"state":<bool>} где bool = 0 или 1
        :return: меняет статус магазина и возвращает статус ответа
      tags:
      - partner
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shop'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Shop'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Shop'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shop'
          description: ''
  /api/v1/partner/state/{id}/:
    get:
      operationId: partner_state_retrieve
      description: Класс для работы со статусом поставщика
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Магазин.
        required: true
      tags:
      - partner
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shop'
          description: ''
    put:
      operationId: partner_state_update
      description: Класс для работы со статусом поставщика
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Магазин.
        required: true
      tags:
      - partner
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shop'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Shop'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Shop'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shop'
          description: ''
    patch:
      operationId: partner_state_partial_update
      description: Класс для работы со статусом поставщика
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Магазин.
        required: true
      tags:
      - partner
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedShop'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedShop'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedShop'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shop'
          description: ''
    delete:
      operationId: partner_state_destroy
      description: Класс для работы со статусом поставщика
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Магазин.
        required: true
      tags:
      - partner
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/partner/update:
    post:
      operationId: partner_update_create
      description: |-
        Добавление и обновление информации от поставщика
        :param request: запрос пользователя с указанием минимум одного из двух параметров в теле запроса
        в которых нужно указать путь к данным формата yaml
        пример -
        {'url': 'https://path_to_file.yaml'} путь к url с данными
        {'file': 'data/data.yaml'} относительный или абсолютный путь к yaml файлу
        :return: добавляет информацию в базу данных и возвращает статус ответа
      tags:
      - partner
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/products:
    get:
      operationId: products_retrieve
      description: |-
        Получение списка товаров или характеристики товара
        :param request: запрос пользователя с указанием или без указания необязательных параметров
        :return: без указания параметров возвращает список всех товаров
                при указании category_id=<int> возвращает отсортированный по категории список товаров
                при указании shop_id=<int> возвращает список товаров определенного магазина
                при указании product_id=<int> возвращает список с характеристиками определенного товара
      tags:
      - products
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/shops:
    get:
      operationId: shops_list
      description: Класс для просмотра списка магазинов
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - shops
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedShopList'
          description: ''
  /api/v1/user/contact:
    get:
      operationId: user_contact_retrieve
      description: |-
        Получение контактных данных
        :param request: запрос пользователя
        :return: возвращает список с контактными данными
      tags:
      - user
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: user_contact_create
      description: |-
        Добавление контактных данных
        :param request: запрос ползователя с данными в теле запроса
        :return: добавляет данные и/или возвращает статус ответа
      tags:
      - user
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: user_contact_update
      description: |-
        Изменение контактных данных
        :param request: запрос пользователя с обновленными данными в теле запроса
        :return: обновляет данные и/или возвращает статус ответа
      tags:
      - user
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: user_contact_destroy
      description: |-
        Удаление контактных данных
        :param request: запрос пользователя с идентификатором списка контактных данных
        :return: удаляет контактные данные и возвращает количество удаленных объектов
      tags:
      - user
      security:
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/user/details/:
    get:
      operationId: user_details_list
      description: |-
        Получение данных о пользователе
        :param request: запрос пользователя
        :return: возвращает полные данные о пользователе
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - user
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
    post:
      operationId: user_details_create
      description: |-
        Редактирование персональных данных пользователя
        :param request: запрос пользователя с обязательным параметром password
        :return: добавляет или обновляет данные и/или возвращает статус ответа
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/v1/user/details/{id}/:
    get:
      operationId: user_details_retrieve
      description: Класс для работы данными пользователя
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Пользователь.
        required: true
      tags:
      - user
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: user_details_update
      description: Класс для работы данными пользователя
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Пользователь.
        required: true
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: user_details_partial_update
      description: Класс для работы данными пользователя
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Пользователь.
        required: true
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: user_details_destroy
      description: Класс для работы данными пользователя
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Пользователь.
        required: true
      tags:
      - user
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/user/login:
    post:
      operationId: user_login_create
      description: |-
        Авторизация пользователя методом POST
        :param request: запрос пользователя с email и password в теле запроса
        :return: возвращает токен пользователя и/или статус ответа
      tags:
      - user
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/user/password_reset:
    post:
      operationId: user_password_reset_create
      description: |-
        An Api View which provides a method to request a password reset token based on an e-mail address

        Sends a signal reset_password_token_created when a reset token was created
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Email'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Email'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Email'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
          description: ''
  /api/v1/user/password_reset/confirm:
    post:
      operationId: user_password_reset_confirm_create
      description: An Api View which provides a method to reset a password based on
        a unique token
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordToken'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordToken'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordToken'
          description: ''
  /api/v1/user/register:
    post:
      operationId: user_register_create
      description: |-
        Регистрация нового пользователя
        Args:
            request: запрос пользователя с обязательными параметрами в теле запроса

        Returns: добавляет нового пользователя и/или возвращает статус ответа
      tags:
      - user
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/user/register/confirm:
    post:
      operationId: user_register_confirm_create
      description: |-
        Подтверждение адреса электронной почты
        :param request: запрос пользователя с обязательными параметрами: email и token который придет на почту после
            регистрации пользователя
        :return: возвращает статус ответа
      tags:
      - user
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Название
          maxLength: 50
      required:
      - id
      - name
    Contact:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        city:
          type: string
          title: Город
          maxLength: 70
        street:
          type: string
          title: Улица
          maxLength: 150
        building:
          type: string
          title: Строение
          maxLength: 70
        apt:
          type: string
          title: Квартира
          maxLength: 70
        user:
          type: integer
          writeOnly: true
          nullable: true
          title: Пользователь
        phone:
          type: string
          title: Телефон
          maxLength: 20
        house:
          type: string
          title: Дом
          maxLength: 15
        structure:
          type: string
          title: Корпус
          maxLength: 100
      required:
      - id
    Email:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    Order:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        ordered_items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemCreate'
          readOnly: true
        state:
          allOf:
          - $ref: '#/components/schemas/StateEnum'
          title: Статус заказа
        dt:
          type: string
          format: date-time
          readOnly: true
        total_sum:
          type: integer
        contact:
          allOf:
          - $ref: '#/components/schemas/Contact'
          readOnly: true
      required:
      - contact
      - dt
      - id
      - ordered_items
      - total_sum
    OrderItemCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        product_info:
          allOf:
          - $ref: '#/components/schemas/ProductInfo'
          readOnly: true
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
          title: Количество
        order:
          type: integer
          writeOnly: true
          title: Заказ
      required:
      - id
      - order
      - product_info
      - quantity
    PaginatedCategoryList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Category'
    PaginatedOrderList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Order'
    PaginatedShopList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Shop'
    PaginatedUserList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PasswordToken:
      type: object
      properties:
        password:
          type: string
        token:
          type: string
      required:
      - password
      - token
    PatchedOrder:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        ordered_items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemCreate'
          readOnly: true
        state:
          allOf:
          - $ref: '#/components/schemas/StateEnum'
          title: Статус заказа
        dt:
          type: string
          format: date-time
          readOnly: true
        total_sum:
          type: integer
        contact:
          allOf:
          - $ref: '#/components/schemas/Contact'
          readOnly: true
    PatchedShop:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Название
          maxLength: 50
        state:
          type: boolean
          title: Статус получения заказов
    PatchedUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        company:
          type: string
          title: Компания
          maxLength: 40
        position:
          type: string
          title: Должность
          maxLength: 40
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
          readOnly: true
    Product:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Название
          maxLength: 100
        category:
          type: string
          readOnly: true
      required:
      - category
      - id
      - name
    ProductInfo:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        model:
          type: string
          title: Модель
          maxLength: 80
        product:
          allOf:
          - $ref: '#/components/schemas/Product'
          readOnly: true
        shop:
          type: integer
          title: Магазин
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
          title: Колличество
        price:
          type: integer
          maximum: 2147483647
          minimum: 0
          title: Цена
        price_rrc:
          type: integer
          maximum: 2147483647
          minimum: 0
          title: Рекомендуемая розничная цена
        product_parameters:
          type: array
          items:
            $ref: '#/components/schemas/ProductParameter'
          readOnly: true
      required:
      - id
      - price
      - price_rrc
      - product
      - product_parameters
      - quantity
    ProductParameter:
      type: object
      properties:
        parameter:
          type: string
          readOnly: true
        value:
          type: string
          title: Значение
          maxLength: 100
      required:
      - parameter
      - value
    Shop:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Название
          maxLength: 50
        state:
          type: boolean
          title: Статус получения заказов
      required:
      - id
      - name
    StateEnum:
      enum:
      - confirmed
      - basket
      - canceled
      - sent
      - assembly
      - delivered
      - new
      type: string
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        company:
          type: string
          title: Компания
          maxLength: 40
        position:
          type: string
          title: Должность
          maxLength: 40
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
          readOnly: true
      required:
      - contacts
      - email
      - id
  securitySchemes:
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
